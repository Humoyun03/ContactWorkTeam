package uz.gita.contactworkteam.presenter.screens.addimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.launchimport uz.gita.contactworkteam.domain.models.ContactParamimport uz.gita.contactworkteam.domain.repository.AppRepositoryimport javax.inject.Inject@HiltViewModelclass AddViewModel @Inject constructor(    private val repository: AppRepository,    private val direction: AddContract.AddDirection,) : AddContract.ViewModel, ViewModel() {    override fun onEventDispatcher(intent: AddContract.Intent) {        when (intent) {            is AddContract.Intent.AddContact -> {                viewModelScope.launch(Dispatchers.IO) {                    repository.addContact(                        ContactParam(                            0,                            intent.firstName,                            intent.lastName,                            intent.phone                        )                    ).launchIn(viewModelScope)                    direction.back()                }            }            AddContract.Intent.Back -> {                viewModelScope.launch {                    direction.back()                }            }        }    }}